package radical;
import java.util.*;

public class HanziRadicalCollection {
    private final Map<Integer, List<Radical>> radicalsByStroke = new HashMap<>();

    public void addRadical(Radical radical) {
        radicalsByStroke.computeIfAbsent(radical.getStrokeCount(), k -> new ArrayList<>()).add(radical);
    }
    
    public void addListOfRadicalByStrokeNum(int strokeNumber, List<Radical> radicalList) {
    	radicalsByStroke.put(strokeNumber, radicalList); 
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("HanziRadicalCollection: \n");
        for (Map.Entry<Integer, List<Radical>> entry : radicalsByStroke.entrySet()) {
            sb.append("Stroke Number: ").append(entry.getKey()).append("\n");
            sb.append("Radicals: ").append(entry.getValue()).append("\n");
        }
        return sb.toString();
    }
    // methods generated by chatgpt 
//    public void addCharacterToRadical(String radicalName, int strokeCount, ChineseCharacter character) {
//        radicalsByStroke.getOrDefault(strokeCount, new ArrayList<>())
//                .stream()
//                .filter(radical -> radical.getName().equals(radicalName))
//                .findFirst()
//                .ifPresent(radical -> radical.addCharacter(strokeCount, character));
//    }
//
//    public List<String> getCharactersForRadical(String radicalName) {
//        List<String> characters = new ArrayList<>();
//        for (List<Radical> radicals : radicalsByStroke.values()) {
//            for (Radical radical : radicals) {
//                if (radical.getName().equals(radicalName)) {
//                    characters.addAll(radical.getCharacters());
//                }
//            }
//        }
//        return characters;
//    }

   }
