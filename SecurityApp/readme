i create a new dir for workspace and add this new project for sprint boot security. Considering there may be many small projects so I dont want to create a github repo for each of them.
  so I create a repo for this workspace and all projects will under same repo.
  this project is created with spring starter option.
  project will build automatically once you create it. 

1. create project with eclipse spring starter with option web. eclipse starter is a plugin in eclipse market that support spring boot projects.
the new project will start building automatically once created
2. create a controller class in the same package as app and create a requestmapping for "/". add dependency jasper to support jsp page. its version should be same with tomcat
version, you can find tomcat version in maven dependency.
3. add dependency spring-boot-starter-security, you dont need to specify version because springboot has its own version control. a login form will appear at index page. username by default is user. and password is printed at log output.

1.27
create many changes to support In memory username/password authentication and mysql authentication. 
to put these changes to github, the following need to be done.
1. before commit changes, first update your local copy with the one in github by running "git pull"
2. git status to check unstaged files and changes
3. create .gitignore to remove .metadata from git "echo .meta/ >> .gitignore" and "git add .gitignore". This file is used by eclipse and you dont want 
to put it into git because if multiple users are using this project and people may have different eclipse configurations.
4. remove .metadata from git by running "git rm --cached -r .metadata". please use --cached otherwise .metadata will be removed from both git repo and filesystem
5. git commit and git push this change
6. git add . to add all changes to stage area and commit and push them

1.27
create a in memory username/password without database.
create a class annotated with @Configuration and create a method annotated with bean and return UserDetailsService.
springframe will use this UserDetailService to get username and password. 
UserDetailService is an interface and in the factory method that create it, we new a class that implement this interface.
This class is a InMemoryUserDetailsManager, we can create users by using method of this class and then return it. 
so we can call this is a configuration procedure. we configure a UserDetailsService for springframe and configure user in this manager.

1.27
add mysql support
1. install mysql and mysql bench. create a database "mydatabase" and a table "User" which is the name of model class using workbench
2. create applicatiaon.properties file to configure sql information.
3. since springboot 3.0, we change javarx to jakarta which defines interface to database.
4. create factory method for AuthenticationProvider for spring will use to authenticate user. AuthenticationProvider is a 
interface, we new a instance of class DaoAuthenticationProvider which implement this interface. in Dao instance, we configure it with
an instance of class MyUserDetailService that implement interface UserDetailService.
5. create a class MyUserDetailsService, similar to RestAPI service class, it will provide service. spring will call its method loadUserByUsername when user input username and password. 
it has a member repo. it will call findByUsername to get user info. Once user info is availabe, a UserDetail is created and returned.
spring will decide if user is permitted or not 
6. A class UserPrincipal implement interface UserDetail. spring will call its method to get username/password and other info.
we need to override many methods. please remember @Override just mean it implement the method defined by interface. It doesnt mean 
interface has a default implementation for this method. So its meaning is a little bit different from c++
7. UserRepository interface is defined and marked with @Repository. we just declare a method findByUsername and spring will implement it.
this reop is used by service class.
8. compared with restful api. authenticationprovider is like a controller and it will pass request to service and service to database.
service class will return userdetails instance to authenticationprovider. the methods in userdetails will be called by
provider to do authentication. in restful api, user info will be written to message body in json format.

1.28
add support to Bcrypt support
1. We will store Bcrypt hashed password in mysql, sea salt(random number) and number of runs are also stored along with hashed password.
spring framework will bcrypte the password and store the resulted hash to mysql database.
2. different from SIP. SIP is digest authentication. we pass digest in the chanllenge-response. web use form-authentication, web form is 
used to carry username/password. they are stored in html body. html is in the http post request body.
3. call changePasswordEncode method of Authentication provider to set encoder to be Bcrypted one.
4. I havent generate my own SecurityFilterChain to filter request, we enable authentication through this filterchain. 
but authentication are different if we enable authentication in this filterchain. 

1.29
create a new project at eclipse by cloning it from github
we can build it right away after we clone it.
there is a problem that User class need a default constructor, it can compile before but i dont know why there is an error now. 
i use a lombok annotation to create a default constructor.
