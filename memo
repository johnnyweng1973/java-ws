1)JUNIT
a)JUNIT is a unit test framework provided by Java. org.junit.jupiter.*. it is used to test methods (simplied use) or other (springboot) 
b)its source code is in src/test/a.b.c. it is in the same package with the Java code. TestClass normally includes instance of Tested Class.
c)@Test is used to annotate the test method. Junit framework will call methods with @Test automatically
       Class<?> clazz = YouTestClass.class; // every class has a Class object named class. 
       Object object = clazz.newInstance();
       Method[] methods = clazz.getTestMethods();  //get methods with @Test annotation, this is a conceptual method
       for (Method method: methods) {
           method.invoke(object); // invoke is run by java runtime,  methods from clazz and method are called reflection API.
       }
d) inside method with @Test: it represent a unit test. Use Assertion methods provided by Junit to check the return value of the method() you are gonna test.
   assertEquals, assertTrue, assertFalse, assertNotNull, compare with the return value of a tested method
e) Fixture: @BeforeEach @AfterEach  methods to run after/before test method 
f) conditions to control if @Test should run
   @EnabledIfEnvironmentVariable(named = "DEBUG", matches = "true")
g) @ParameterizedTest
   @CsvFileSource(resources = { "/test-capitalize.csv" })
   void testCapitalizeUsingCsvFile(String input, String result) {
      assertEquals(result, StringUtils.capitalize(input));
   }
h) exception test
    assertException(IllegalInputArgument.class, ()->{Factorial.fact(-1);})
    implementation of this assertException:
     void assertException(Class<? extends Throwable> expectedException, Runnable operation) {
         try {
               operation.run()
              fail();
         } catch (Throwable actualException) {
             if (!expectedException.isInstance(actualException)) {
                fail();
         }
     }
